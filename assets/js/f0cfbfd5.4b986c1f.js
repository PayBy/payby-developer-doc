"use strict";(self.webpackChunkdeveloper_official_site=self.webpackChunkdeveloper_official_site||[]).push([[381],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(r),m=a,h=u["".concat(s,".").concat(m)]||u[m]||p[m]||o;return r?n.createElement(h,i(i({ref:t},d),{},{components:r})):n.createElement(h,i({ref:t},d))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},443:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const o={sidebar_position:1,toc_max_heading_level:6},i="Best practice",l={unversionedId:"General/best-practice",id:"General/best-practice",title:"Best practice",description:"Merchant and PayBy system interaction",source:"@site/docs/General/best-practice.md",sourceDirName:"General",slug:"/General/best-practice",permalink:"/payby-developer-doc/docs/General/best-practice",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,toc_max_heading_level:6},sidebar:"tutorialSidebar",previous:{title:"General",permalink:"/payby-developer-doc/docs/category/general"},next:{title:"Authentication",permalink:"/payby-developer-doc/docs/General/authentication"}},s={},c=[{value:"Merchant and PayBy system interaction",id:"merchant-and-payby-system-interaction",level:3},{value:"Recommended payment flow",id:"recommended-payment-flow",level:3},{value:"Re-initiate a payment",id:"re-initiate-a-payment",level:3},{value:"When to retrieve an order?",id:"when-to-retrieve-an-order",level:3},{value:"When to cancel (revoke) an order",id:"when-to-cancel-revoke-an-order",level:3}],d={toc:c};function p(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"best-practice"},"Best practice"),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"merchant-and-payby-system-interaction"},"Merchant and PayBy system interaction"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"The merchant\u2019s server calls the order creation interface to request an order."),(0,a.kt)("li",{parentName:"ol"},"The merchant\u2019s server queries the order status."),(0,a.kt)("li",{parentName:"ol"},"The merchant\u2019s server receives payment notifications.")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"recommended-payment-flow"},"Recommended payment flow"),(0,a.kt)("p",null,"Before any payments can be processed, an order needs to be initiated by the merchant along with the merchant order number using Order creation API."),(0,a.kt)("p",null,"The merchant order number is generated by the merchant. It only supports the combination of letters, numbers, dashes (-) and underscores (_). PayBy requires the merchant order number to be unique for the same merchant (it is recommended to generate the order number according to the current system time plus a random sequence)."),(0,a.kt)("p",null,"When an order is created, PayBy finishes the payment processing asynchronously and doesn't require the requester to hold on to a connection to wait. This gives more flexibility and for PayBy to serve more requests simultaneously, however, the requester doesn't immediately know the result of their payment as a side effect. To notify the merchant of the processing result, PayBy sends a notification to the merchant when payment has been processed or accepts a periodic query from the merchants to find out the latest state of the order. We will explain more in detail in the below sections."),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"re-initiate-a-payment"},"Re-initiate a payment"),(0,a.kt)("p",null,"To re-initiate a payment, the original merchant order number should be used to avoid repeated payment. On the other hand, an order that has been paid or canceled cannot be re-opened. This is especially useful to offer clear traceability when it comes to audits or disputes."),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"when-to-retrieve-an-order"},"When to retrieve an order?"),(0,a.kt)("p",null,"The query endpoint allows merchants to inquire about the status and details of all orders (pay, refund, transfer). Merchants can query the order status proactively and periodically using this API to determine the next step."),(0,a.kt)("p",null,"Even though PayBy tries everything possible to deliver a result notification, there are still cases where querying the order status is necessary and better, especially, in the following cases:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"The Merchant's server experiences regular maintenance and temporary outages of sorts so that a notification cannot be delivered."),(0,a.kt)("li",{parentName:"ol"},"A system error or unknown transaction status is returned when calling the payment APIs."),(0,a.kt)("li",{parentName:"ol"},"To confirm payment status before calling the ",(0,a.kt)("inlineCode",{parentName:"li"},"Order creation API"),".")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"when-to-cancel-revoke-an-order"},"When to cancel (revoke) an order"),(0,a.kt)("p",null,"It is inevitable that some payments may fail or need to be re-initiated. As mentioned above, to keep the payment history clean and avoid duplicate payments, it's important for Merchants to follow the best practice and cancel an unfulfilled order when:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"During order creation, the request times out or didn't process successfully within an acceptable time window. It's always a good practice to query for the order status and cancel when it times out."),(0,a.kt)("li",{parentName:"ol"},"Before re-initiate a new order before or after the above-mentioned timeout, it's recommended to cancel the previous one even though it may not have come through."),(0,a.kt)("li",{parentName:"ol"},"After an order is created and pending payment from the user, the user might fail to proceed with the payment, e.g. accidentally declining, this would also require the merchant to cancel the order and create a new one.")))}p.isMDXComponent=!0}}]);