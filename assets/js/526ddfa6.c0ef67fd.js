"use strict";(self.webpackChunkdeveloper_official_site=self.webpackChunkdeveloper_official_site||[]).push([[8296],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>y});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=r.createContext({}),l=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=l(e.components);return r.createElement(i.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),u=l(t),y=a,g=u["".concat(i,".").concat(y)]||u[y]||c[y]||o;return t?r.createElement(g,s(s({ref:n},d),{},{components:t})):r.createElement(g,s({ref:n},d))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=u;var p={};for(var i in n)hasOwnProperty.call(n,i)&&(p[i]=n[i]);p.originalType=e,p.mdxType="string"==typeof e?e:a,s[1]=p;for(var l=2;l<o;l++)s[l]=t[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},99177:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>p,toc:()=>l});var r=t(83117),a=(t(67294),t(3905));t(8209);const o={sidebar_position:1,toc_max_heading_level:6},s="Online payment SDK - JAVA",p={unversionedId:"SDKs/online-JAVA",id:"SDKs/online-JAVA",title:"Online payment SDK - JAVA",description:"Description",source:"@site/docs/SDKs/online-JAVA.md",sourceDirName:"SDKs",slug:"/SDKs/online-JAVA",permalink:"/payby-developer-doc/docs/SDKs/online-JAVA",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,toc_max_heading_level:6},sidebar:"tutorialSidebar",previous:{title:"In-App SDK",permalink:"/payby-developer-doc/docs/SDKs/inapp"},next:{title:"Online payment SDK - PHP",permalink:"/payby-developer-doc/docs/SDKs/online-php"}},i={},l=[{value:"Description",id:"description",level:3},{value:"SDK Download",id:"sdk-download",level:3},{value:"Pre-Condition",id:"pre-condition",level:3},{value:"JDK",id:"jdk",level:4},{value:"Maven",id:"maven",level:4},{value:"Import maven repository",id:"import-maven-repository",level:4},{value:"Download dependency",id:"download-dependency",level:4},{value:"Install local repository",id:"install-local-repository",level:4},{value:"Deploy remote repository",id:"deploy-remote-repository",level:4},{value:"Project import maven dependency",id:"project-import-maven-dependency",level:4},{value:"SDK cascade depends on specific content",id:"sdk-cascade-depends-on-specific-content",level:4},{value:"Bouncycastle version special description",id:"bouncycastle-version-special-description",level:4},{value:"Digital signature",id:"digital-signature",level:3},{value:"Preparing keys",id:"preparing-keys",level:4},{value:"Signature algorithm",id:"signature-algorithm",level:4},{value:"Encryption Algorithm",id:"encryption-algorithm",level:4},{value:"Verify Signature Algorithm",id:"verify-signature-algorithm",level:4},{value:"API Description",id:"api-description",level:3},{value:"Function Description",id:"function-description",level:4}],d={toc:l};function c(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"online-payment-sdk---java"},"Online payment SDK - JAVA"),(0,a.kt)("h3",{id:"description"},"Description"),(0,a.kt)("p",null,"This guide is written for application developers who want to integrate the PayBy payment solution."),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"sdk-download"},"SDK Download"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/PayBy/PayBy-java"},"https://github.com/PayBy/PayBy-java")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"pre-condition"},"Pre-Condition"),(0,a.kt)("h4",{id:"jdk"},"JDK"),(0,a.kt)("p",null,"Versions \u2265 1.8 are required."),(0,a.kt)("p",null,"Executing validation commands on the command line ",(0,a.kt)("strong",{parentName:"p"},"java -version"),", return similar content:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'java version "1.8.0_191"\n\nJava(TM) SE Runtime Environment (build 1.8.0_191-b12)\n\nJava HotSpot(TM) 64-Bit Server VM (build 25.191-b12, mixed mode)\n')),(0,a.kt)("br",null),(0,a.kt)("h4",{id:"maven"},"Maven"),(0,a.kt)("p",null,"Versions \u2265 3.0 are required."),(0,a.kt)("p",null,"Executing validation commands on the command line ",(0,a.kt)("strong",{parentName:"p"},"mvn \u2013version"),"return similar content:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'Apache Maven 3.6.0 (97c98ec64a1fdfee7767ce5ffb20918da4f719f3; 2018-10-25T02:41:47+08:00)\n\nMaven home: D:\\apache-maven-3.6.0\\bin\\..\n\nJava version: 1.8.0_191, vendor: Oracle Corporation, runtime: C:\\Program Files\\Java\\jdk1.8.0_191\\jre\n\nDefault locale: zh_CN, platform encoding: GBK\n\nOS name: "windows 7", version: "6.1", arch: "amd64", family: "windows"\n')),(0,a.kt)("br",null),(0,a.kt)("h4",{id:"import-maven-repository"},"Import maven repository"),(0,a.kt)("p",null,"Import local library or remote library, choose by yourself according to the user's R & D environment."),(0,a.kt)("br",null),(0,a.kt)("h4",{id:"download-dependency"},"Download dependency"),(0,a.kt)("p",null,"git clone ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/PayBy/PayBy-java.git"},"https://github.com/PayBy/PayBy-java.git")),(0,a.kt)("p",null,"Open download directory: PayBy-java/dependency"),(0,a.kt)("br",null),(0,a.kt)("h4",{id:"install-local-repository"},"Install local repository"),(0,a.kt)("p",null,"Move to the \u2018PayBy-java/dependency\u2019 subdirectory."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"mvn install:install-file -Dfile=payby-openapi-1.0.17.jar -DpomFile=payby-openapi-1.0.17.pom\nmvn install:install-file -Dfile=payby-sdk-1.3.21.jar -DpomFile=payby-sdk-1.3.21.pom\n")),(0,a.kt)("br",null),(0,a.kt)("h4",{id:"deploy-remote-repository"},"Deploy remote repository"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"mvn deploy:deploy-file -Durl=company maven repository url path -DrepositoryId=repository name -Dfile=payby-openapi-1.0.17.jar -DpomFile=payby-openapi-1.0.17.pom\nmvn deploy:deploy-file -Durl=company maven repository url path -DrepositoryId=repository name -Dfile=payby-sdk-1.3.21.jar -DpomFile=payby-sdk-1.3.21.pom\n")),(0,a.kt)("br",null),(0,a.kt)("h4",{id:"project-import-maven-dependency"},"Project import maven dependency"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},"<dependency>\n    <groupId>com.payby.gateway</groupId>\n    <artifactId>payby-sdk</artifactId>\n    <version>1.3.21</version>\n </dependency>\n")),(0,a.kt)("br",null),(0,a.kt)("h4",{id:"sdk-cascade-depends-on-specific-content"},"SDK cascade depends on specific content"),(0,a.kt)("p",null,"The specific content varies according to the actual version executed at the project root."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"mvn dependency:tree\n")),(0,a.kt)("p",null,"Get results:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"com.payby.gateway:payby-sdk:jar:1.3.21\n +- com.payby.gateway:payby-openapi:jar:1.0.17:compile\n +- commons-io:commons-io:jar:2.4:compile\n +- commons-codec:commons-codec:jar:1.13:compile\n +- org.projectlombok:lombok:jar:1.18.8:provided\n +- org.bouncycastle:bcprov-jdk15on:jar:1.64:compile\n +- org.bouncycastle:bcpkix-jdk15on:jar:1.64:compile\n +- com.alibaba:fastjson:jar:1.2.58:compile\n +- org.slf4j:slf4j-api:jar:1.7.26:compile\n +- org.apache.commons:commons-lang3:jar:3.9:compile\n +- com.squareup.okhttp3:okhttp:jar:3.11.0:compile\n |  \\- com.squareup.okio:okio:jar:1.14.0:compile\n +- org.apache.httpcomponents:httpclient:jar:4.5.6:compile\n +- org.apache.httpcomponents:httpcore:jar:4.4.10:compile\n |  \\- commons-logging:commons-logging:jar:1.2:compile\n +- com.madgag.spongycastle:bcpkix-jdk15on:jar:1.58.0.0:compile\n |  +- com.madgag.spongycastle:core:jar:1.58.0.0:compile\n |  \\- com.madgag.spongycastle:prov:jar:1.58.0.0:compile\n |     \\- junit:junit:jar:4.12:compile\n |        \\- org.hamcrest:hamcrest-core:jar:1.3:compile\n +- ch.qos.logback:logback-classic:jar:1.2.3:compile\n |  \\- ch.qos.logback:logback-core:jar:1.2.3:compile\n \\- com.squareup.okhttp3:logging-interceptor:jar:3.11.0:compile\n")),(0,a.kt)("br",null),(0,a.kt)("h4",{id:"bouncycastle-version-special-description"},"Bouncycastle version special description"),(0,a.kt)("p",null,"Because many versions of Bouncycastle Library, The version we use:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"<dependency>\n    <groupId>org.bouncycastle</groupId>\n    <artifactId>bcprov-jdk15on</artifactId>\n    <version>1.64</version>\n    <scope>compile</scope>\n    <optional>true</optional>\n</dependency>\n<dependency>\n    <groupId>org.bouncycastle</groupId>\n    <artifactId>bcpkix-jdk15on</artifactId>\n    <version>1.64</version>\n    <scope>compile</scope>\n    <optional>true</optional>\n</dependency>\n")),(0,a.kt)("p",null,"Users can switch to other equivalent Maven library dependencies according to the actual situation."),(0,a.kt)("p",null,"Using view query provided by mvn dependency."),(0,a.kt)("p",null,"The host project uses the BC dependency. If there is a conflict, you can consider using the Maven exclude method to remove the old version."),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"digital-signature"},"Digital signature"),(0,a.kt)("h4",{id:"preparing-keys"},"Preparing keys"),(0,a.kt)("p",null,"Recommended operation for private key generation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"### Generate private key\n# PayBy_key.pem Private key file name\n# 2048 Private key size, at least 2048\nopenssl genrsa -out PayBy_key.pem 2048\n\n### Export public key\n# PayBy_key.pem Private key generated in the previous step # PayBy_key_public.pem Exported public key name\nopenssl rsa -in PayBy_key.pem -out PayBy_key_public.pem -pubout\n\n### Export private key for Java\n# PayBy_key.pem Private key generated in the 1st step\n# PayBy_key_Private.pem\nopenssl pkcs8 -in PayBy_key.pem -topk8 -nocrypt -out PayBy_key_private.pem\n\n")),(0,a.kt)("br",null),(0,a.kt)("h4",{id:"signature-algorithm"},"Signature algorithm"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Using SHA256WithRSA for signature algorithm. The merchant itself issues the private key."),(0,a.kt)("li",{parentName:"ol"},"Original signature rule: Requesting the original content of the body."),(0,a.kt)("li",{parentName:"ol"},"Using UTF-8 to encode the original content."),(0,a.kt)("li",{parentName:"ol"},"Using Base64 to encode the resulting signature.")),(0,a.kt)("br",null),(0,a.kt)("h4",{id:"encryption-algorithm"},"Encryption Algorithm"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"The encryption algorithm uses RSA public-key encryption, and PayBy issues the public key."),(0,a.kt)("li",{parentName:"ol"},"The encrypted field should not be too large, generally more than 200 bytes."),(0,a.kt)("li",{parentName:"ol"},"Encryption rules: RSA (encrypted original encryption)."),(0,a.kt)("li",{parentName:"ol"},"UTF-8 encoding is used for plaintext."),(0,a.kt)("li",{parentName:"ol"},"The encryption result is encoded with Base64.")),(0,a.kt)("br",null),(0,a.kt)("h4",{id:"verify-signature-algorithm"},"Verify Signature Algorithm"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Using SHA256WithRSA to verify the signature algorithm. The RSA public key is downloaded from the PayBy merchant console."),(0,a.kt)("li",{parentName:"ol"},"Using Base64 to decode the signature, i.e., decoded_sign_data."),(0,a.kt)("li",{parentName:"ol"},"Using UTF-8 to decode the original content, i.e. decoded_content_data."),(0,a.kt)("li",{parentName:"ol"},"Verify signature using parameters as listed (rsa_public_key, decoded_sign_data, decoded_content_data).")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"api-description"},"API Description"),(0,a.kt)("h4",{id:"function-description"},"Function Description"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"1. PayByClient")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'public static PayByClient getPayByClient()\n    throws InvalidKeySpecException, SignatureException, InvalidKeyException, IOException, URISyntaxException {\n    ApiConfig apiConfig = new ApiConfig();\n    // setting interface url\n    apiConfig.setDomain("https://uat.test2pay.com/sgs/api");\n\n    // setting pkcs8 privateKey path\n    String merchantPrivateKey = new String(Files.readAllBytes(\n        Paths.get(PayByDemo.class.getClassLoader().getResource("merchant_demo_private.pem").toURI())));\n\n    // setting publicKey path\n    String payByPubKey = new String(Files\n        .readAllBytes(Paths.get(PayByDemo.class.getClassLoader().getResource("payby_public_key.pem").toURI())));\n\n    apiConfig.setCert(new KeyCert(merchantPrivateKey, payByPubKey));\n\n    // setting http header params\n    apiConfig.setFixHeaders(getFixHeaders());\n\n    HttpLoggingInterceptor logInterceptor = new HttpLoggingInterceptor();\n    logInterceptor.setLevel(HttpLoggingInterceptor.Level.BODY);\n\n    ClientConfig config =\n        new OkHttpClientConfig.Builder().interceptor(new OkHttpClientConfig.SignInterceptor(apiConfig.getCert()))\n            .interceptor(logInterceptor).apiConfig(apiConfig).build();\n\n    PayByClient client = new PayByClient(config);\n    return client;\n\n}\n\npublic static List<Pair<String, String>> getFixHeaders() {\n    List<Pair<String, String>> pairs = new ArrayList<>();\n    // setting Partner-Id\n    pairs.add(new ImmutablePair<>("partner-id", "200000042607"));\n    // setting group-name Optional\n    pairs.add(new ImmutablePair<>("group-name", ""));\n    // setting branch-name Optional\n    pairs.add(new ImmutablePair<>("branch-name", ""));\n    return pairs;\n}\n')),(0,a.kt)("br",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"2. Order creation")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'    PayByClient client = getPayByClient();\n\n    PlaceOrderRequest placeOrderRequest = new PlaceOrderRequest();\n    // Merchant order number Required\n    placeOrderRequest.setMerchantOrderNo("M202005120001");\n    // Product name Required\n    placeOrderRequest.setSubject("ipad");\n    // Order totalAmount Required\n    ExternalMoney totalAmount = new ExternalMoney(new BigDecimal("0.1"), "AED");\n    placeOrderRequest.setTotalAmount(totalAmount);\n    // Payment scenario code Required\n    placeOrderRequest.setPaySceneCode("DYNQR");\n    // Notification URL Optional\n    placeOrderRequest.setNotifyUrl("http://yoursite.com/api/notification");\n    // Accessory content Optional\n    AccessoryContent accessoryContent = new AccessoryContent();\n    // Amount detail Optional\n    AmountDetail amountDetail = new AmountDetail();\n    // Vat amount Optional\n    amountDetail.setVatAmount(new ExternalMoney(new BigDecimal("0.1"), "AED"));\n    // Goods detail Optional\n    GoodsDetail goodsDetail = new GoodsDetail();\n    goodsDetail.setBody("gifts");\n    goodsDetail.setGoodsName("candy flower");\n    goodsDetail.setGoodsId("GI1005");\n    // Terminal detail Optional\n    TerminalDetail terminalDetail = new TerminalDetail();\n    terminalDetail.setMerchantName("candy home");\n    accessoryContent.setAmountDetail(amountDetail);\n    accessoryContent.setGoodsDetail(goodsDetail);\n    accessoryContent.setTerminalDetail(terminalDetail);\n    placeOrderRequest.setAccessoryContent(accessoryContent);\n    SgsRequestWrap<PlaceOrderRequest> wrap = SgsRequestWrap.wrap(placeOrderRequest);\n\n    System.out.println("placeOrder request=>" + JSON.toJSONString(wrap));\n\n    SgsResponseWrap<PlaceOrderResponse> responseWrap = client.execute(SgsApi.PLACE_ACQUIRE_ORDER, wrap);\n    System.out.println("placeOrder response=>" + JSON.toJSONString(responseWrap));\n    Assert.assertTrue(SgsApi.checkResponse(responseWrap));\n    PlaceOrderResponse body = responseWrap.getBody();\n    System.out.println("placeOrder body=>" + JSON.toJSONString(body));\n\n')),(0,a.kt)("br",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"3. Order cancellation")),(0,a.kt)("p",null,"ByMerchantOrderNo"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'    PayByClient client = getPayByClient();\n\n    OrderIndexRequest orderIndexRequest = new OrderIndexRequest();\n    // Merchant order number Required\n    orderIndexRequest.setMerchantOrderNo("M202005120001");\n    SgsRequestWrap<OrderIndexRequest> wrap = SgsRequestWrap.wrap(orderIndexRequest);\n    System.out.println("cancelOrder request=>" + JSON.toJSONString(wrap));\n\n    SgsResponseWrap<GetPlaceOrderResponse> responseWrap = client.execute(SgsApi.CANCEL_ACQUIRE_ORDER, wrap);\n    System.out.println("cancelOrder response=>" + JSON.toJSONString(responseWrap));\n    Assert.assertTrue(SgsApi.checkResponse(responseWrap));\n    GetPlaceOrderResponse body = responseWrap.getBody();\n    System.out.println("cancelOrder body=>" + JSON.toJSONString(body));\n')),(0,a.kt)("p",null,"ByOrderNo"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'    PayByClient client = getPayByClient();\n\n    OrderIndexRequest orderIndexRequest = new OrderIndexRequest();\n    // Order number Required\n    orderIndexRequest.setOrderNo("190000000001");\n    SgsRequestWrap<OrderIndexRequest> wrap = SgsRequestWrap.wrap(orderIndexRequest);\n    System.out.println("cancelOrder request=>" + JSON.toJSONString(wrap));\n\n    SgsResponseWrap<GetPlaceOrderResponse> responseWrap = client.execute(SgsApi.CANCEL_ACQUIRE_ORDER, wrap);\n    System.out.println("cancelOrder response=>" + JSON.toJSONString(responseWrap));\n    Assert.assertTrue(SgsApi.checkResponse(responseWrap));\n    GetPlaceOrderResponse body = responseWrap.getBody();\n    System.out.println("cancelOrder body=>" + JSON.toJSONString(body));\n')),(0,a.kt)("br",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"4. Order query")),(0,a.kt)("p",null,"ByMerchantOrderNo"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'    PayByClient client = getPayByClient();\n\n    OrderIndexRequest orderIndexRequest = new OrderIndexRequest();\n    // Merchant order number Required\n    orderIndexRequest.setMerchantOrderNo("M202005120001");\n    SgsRequestWrap<OrderIndexRequest> wrap = SgsRequestWrap.wrap(orderIndexRequest);\n    System.out.println("getOrder request=>" + JSON.toJSONString(wrap));\n\n    SgsResponseWrap<GetPlaceOrderResponse> responseWrap = client.execute(SgsApi.GET_ACQUIRE_ORDER, wrap);\n    System.out.println("getOrder response=>" + JSON.toJSONString(responseWrap));\n    Assert.assertTrue(SgsApi.checkResponse(responseWrap));\n    GetPlaceOrderResponse body = responseWrap.getBody();\n    System.out.println("getOrder body=>" + JSON.toJSONString(body));\n')),(0,a.kt)("p",null,"ByOrderNo"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'    PayByClient client = getPayByClient();\n\n    OrderIndexRequest orderIndexRequest = new OrderIndexRequest();\n    //order number Required\n    orderIndexRequest.setOrderNo("13000000023101");\n    SgsRequestWrap<OrderIndexRequest> wrap = SgsRequestWrap.wrap(orderIndexRequest);\n    System.out.println("getOrder request=>" + JSON.toJSONString(wrap));\n\n    SgsResponseWrap<GetPlaceOrderResponse> responseWrap = client.execute(SgsApi.GET_ACQUIRE_ORDER, wrap);\n    System.out.println("getOrder response=>" + JSON.toJSONString(responseWrap));\n    Assert.assertTrue(SgsApi.checkResponse(responseWrap));\n    GetPlaceOrderResponse body = responseWrap.getBody();\n    System.out.println("getOrder body=>" + JSON.toJSONString(body));\n')),(0,a.kt)("br",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"5. Order refund")),(0,a.kt)("p",null,"ByOriginMerchantOrderNo"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'    PayByClient client = getPayByClient();\n\n    PlaceRefundOrderRequest placeRefundOrderRequest = new PlaceRefundOrderRequest();\n    // Refund refund amount Required\n    placeRefundOrderRequest.setAmount(new ExternalMoney(new BigDecimal("0.1"), "AED"));\n    // Merchant order number Required\n    placeRefundOrderRequest.setRefundMerchantOrderNo("M80000000001");\n    // Original merchant order number\n    placeRefundOrderRequest.setOriginMerchantOrderNo("M220000000001");\n    // Refund operator name Optional\n    placeRefundOrderRequest.setOperatorName("JACKMA");\n    // Refund reason name Optional\n    placeRefundOrderRequest.setReason("reason123");\n    // Notification URL Optional\n    placeRefundOrderRequest.setNotifyUrl("http://yoursite.com/api/notification");\n\n    SgsRequestWrap<PlaceRefundOrderRequest> wrap = SgsRequestWrap.wrap(placeRefundOrderRequest);\n    System.out.println("refundOrder request=>" + JSON.toJSONString(wrap));\n\n    SgsResponseWrap<PlaceRefundOrderResponse> responseWrap = client.execute(SgsApi.PLACE_REFUND_ORDER, wrap);\n    System.out.println("refundOrder response=>" + JSON.toJSONString(responseWrap));\n    Assert.assertTrue(SgsApi.checkResponse(responseWrap));\n    PlaceRefundOrderResponse body = responseWrap.getBody();\n    System.out.println("refundOrder body=>" + JSON.toJSONString(body));\n')),(0,a.kt)("p",null,"ByOriginOrderNo"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'    PayByClient client = getPayByClient();\n\n    PlaceRefundOrderRequest placeRefundOrderRequest = new PlaceRefundOrderRequest();\n    // Refund refund amount Required\n    placeRefundOrderRequest.setAmount(new ExternalMoney(new BigDecimal("0.1"), "AED"));\n    // Merchant order number Required\n    placeRefundOrderRequest.setRefundMerchantOrderNo("M80000000001");\n    // Original order number\n    placeRefundOrderRequest.setOriginOrderNo("19000000001");\n    // Refund operator name Optional\n    placeRefundOrderRequest.setOperatorName("JACKMA");\n    // Refund reason name Optional\n    placeRefundOrderRequest.setReason("reason123");\n    // Notification URL Optional\n    placeRefundOrderRequest.setNotifyUrl("http://yoursite.com/api/notification");\n\n    SgsRequestWrap<PlaceRefundOrderRequest> wrap = SgsRequestWrap.wrap(placeRefundOrderRequest);\n    System.out.println("refundOrder request=>" + JSON.toJSONString(wrap));\n\n    SgsResponseWrap<PlaceRefundOrderResponse> responseWrap = client.execute(SgsApi.PLACE_REFUND_ORDER, wrap);\n    System.out.println("refundOrder response=>" + JSON.toJSONString(responseWrap));\n    Assert.assertTrue(SgsApi.checkResponse(responseWrap));\n    PlaceRefundOrderResponse body = responseWrap.getBody();\n    System.out.println("refundOrder body=>" + JSON.toJSONString(body));\n')),(0,a.kt)("br",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"6. Order refund query")),(0,a.kt)("p",null,"By Merchant Order No."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'    PayByClient client = getPayByClient();\n\n    OrderIndexRequest orderIndexRequest = new OrderIndexRequest();\n    // Merchant order number Required\n    orderIndexRequest.setMerchantOrderNo("M80000000001");\n    SgsRequestWrap<OrderIndexRequest> wrap = SgsRequestWrap.wrap(orderIndexRequest);\n    System.out.println("getRefundOrder request=>" + JSON.toJSONString(wrap));\n\n    SgsResponseWrap<GetRefundOrderResponse> responseWrap = client.execute(SgsApi.GET_REFUND_ORDER, wrap);\n    System.out.println("getRefundOrder response=>" + JSON.toJSONString(responseWrap));\n    Assert.assertTrue(SgsApi.checkResponse(responseWrap));\n    GetRefundOrderResponse body = responseWrap.getBody();\n    System.out.println("getRefundOrder body=>" + JSON.toJSONString(body));\n')),(0,a.kt)("p",null,"By Order No."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'    PayByClient client = getPayByClient();\n\n\n    OrderIndexRequest orderIndexRequest = new OrderIndexRequest();\n    // order number Required\n    orderIndexRequest.setOrderNo("1900000000001");\n    SgsRequestWrap<OrderIndexRequest> wrap = SgsRequestWrap.wrap(orderIndexRequest);\n    System.out.println("getRefundOrder request=>" + JSON.toJSONString(wrap));\n\n    SgsResponseWrap<GetRefundOrderResponse> responseWrap = client.execute(SgsApi.GET_REFUND_ORDER, wrap);\n    System.out.println("getRefundOrder response=>" + JSON.toJSONString(responseWrap));\n    Assert.assertTrue(SgsApi.checkResponse(responseWrap));\n    GetRefundOrderResponse body = responseWrap.getBody();\n    System.out.println("getRefundOrder body=>" + JSON.toJSONString(body));\n')),(0,a.kt)("br",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"7. Transfer")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'    PayByClient client = getPayByClient();\n\n    PlaceTransferOrderRequest placeTransferOrderRequest = new PlaceTransferOrderRequest();\n\n    // Merchant order number Required\n    placeTransferOrderRequest.setMerchantOrderNo("M320000000001");\n    // Beneficiary Identity Type Required\n    placeTransferOrderRequest.setBeneficiaryIdentityType("PHONE_NO");\n    String payByPubKey = new String(Files\n        .readAllBytes(Paths.get(PayByDemo.class.getClassLoader().getResource("payby_public_key.pem").toURI())));\n    // Beneficiary Identity\n    placeTransferOrderRequest\n        .setBeneficiaryIdentity(RsaUtil.encrypt("971-585812341", Charset.forName("UTF-8"), payByPubKey, 2048));\n    placeTransferOrderRequest\n        .setBeneficiaryFullName(RsaUtil.encrypt("JACKMA", Charset.forName("UTF-8"), payByPubKey, 2048));\n\n    // Transfer order amount Required\n    placeTransferOrderRequest.setAmount(new ExternalMoney(new BigDecimal("0.1"), "AED"));\n\n    // memo Required\n    placeTransferOrderRequest.setMemo("Bonus");\n    // Notification URL Optional\n    placeTransferOrderRequest.setNotifyUrl("http://yoursite.com/api/notification");\n\n    SgsRequestWrap<PlaceTransferOrderRequest> wrap = SgsRequestWrap.wrap(placeTransferOrderRequest);\n    System.out.println("transfer request=>" + JSON.toJSONString(wrap));\n\n    SgsResponseWrap<PlaceTransferOrderResponse> responseWrap = client.execute(SgsApi.PLACE_TRANSFER_ORDER, wrap);\n    System.out.println("transfer response=>" + JSON.toJSONString(responseWrap));\n    Assert.assertTrue(SgsApi.checkResponse(responseWrap));\n    PlaceTransferOrderResponse body = responseWrap.getBody();\n    System.out.println("transfer body=>" + JSON.toJSONString(body));\n')),(0,a.kt)("br",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"8. Transfer query")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'    PayByClient client = getPayByClient();\n\n    OrderIndexRequest orderIndexRequest = new OrderIndexRequest();\n    // Merchant order number Required\n    orderIndexRequest.setMerchantOrderNo("M320000000001");\n\n    SgsRequestWrap<OrderIndexRequest> wrap = SgsRequestWrap.wrap(orderIndexRequest);\n    System.out.println("getTransferOrder request=>" + JSON.toJSONString(wrap));\n\n    SgsResponseWrap<GetTransferOrderResponse> responseWrap = client.execute(SgsApi.GET_TRANSFER_ORDER, wrap);\n    System.out.println("getTransferOrder response=>" + JSON.toJSONString(responseWrap));\n    Assert.assertTrue(SgsApi.checkResponse(responseWrap));\n    GetTransferOrderResponse body = responseWrap.getBody();\n    System.out.println("getTransferOrder body=>" + JSON.toJSONString(body));\n')),(0,a.kt)("br",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"9. Transfer to bank")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'    PayByClient client = getPayByClient();\n\n    PlaceTransferToBankOrderRequest placeTransferToBankOrderRequest = new PlaceTransferToBankOrderRequest();\n    // Merchant order number Required\n    placeTransferToBankOrderRequest.setMerchantOrderNo("M320000000002");\n    String payByPubKey = new String(Files\n        .readAllBytes(Paths.get(PayByDemo.class.getClassLoader().getResource("payby_public_key.pem").toURI())));\n    // Holder Name Required\n    placeTransferToBankOrderRequest\n        .setHolderName(RsaUtil.encrypt("JACKMA", Charset.forName("UTF-8"), payByPubKey, 2048));\n    // Iban Required\n    placeTransferToBankOrderRequest\n        .setIban(RsaUtil.encrypt("5000312313111", Charset.forName("UTF-8"), payByPubKey, 2048));\n    // SwiftCode Optional\n    placeTransferToBankOrderRequest.setSwiftCode("ARABAEADDER");\n    // Transfer order amount Required\n    placeTransferToBankOrderRequest.setAmount(new ExternalMoney(new BigDecimal("0.1"), "AED"));\n    // memo Required\n    placeTransferToBankOrderRequest.setMemo("Bonus");\n    // Notification URL Optional\n    placeTransferToBankOrderRequest.setNotifyUrl("http://yoursite.com/api/notification");\n\n    SgsRequestWrap<PlaceTransferToBankOrderRequest> wrap = SgsRequestWrap.wrap(placeTransferToBankOrderRequest);\n    System.out.println("transfer2bank request=>" + JSON.toJSONString(wrap));\n    SgsResponseWrap<PlaceTransferToBankOrderResponse> responseWrap =\n        client.execute(SgsApi.PLACE_TRANSFER_TO_BANK_ORDER, wrap);\n    System.out.println("transfer2bank response=>" + JSON.toJSONString(responseWrap));\n    Assert.assertTrue(SgsApi.checkResponse(responseWrap));\n    PlaceTransferToBankOrderResponse body = responseWrap.getBody();\n    System.out.println("transfer2bank body=>" + JSON.toJSONString(body));\n')),(0,a.kt)("br",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"10. Transfer to bank query")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'    PayByClient client = getPayByClient();\n\n    OrderIndexRequest orderIndexRequest = new OrderIndexRequest();\n    // Merchant order number Required\n    orderIndexRequest.setMerchantOrderNo("M320000000002");\n\n    SgsRequestWrap<OrderIndexRequest> wrap = SgsRequestWrap.wrap(orderIndexRequest);\n    System.out.println("getTransferToBankOrder request=>" + JSON.toJSONString(wrap));\n\n    SgsResponseWrap<GetTransferToBankOrderResponse> responseWrap =\n        client.execute(SgsApi.GET_TRANSFER_TO_BANK_ORDER, wrap);\n    System.out.println("getTransferToBankOrder response=>" + JSON.toJSONString(responseWrap));\n    Assert.assertTrue(SgsApi.checkResponse(responseWrap));\n    GetTransferToBankOrderResponse body = responseWrap.getBody();\n    System.out.println("getTransferToBankOrder body=>" + JSON.toJSONString(body));\n')),(0,a.kt)("br",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"11. Order revoke")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'PayByClient client = getPayByClient();\n\n        OrderIndexRequest orderIndexRequest = new OrderIndexRequest();\n        // Merchant order number Required\n        orderIndexRequest.setMerchantOrderNo("M320000000002");\n        SgsRequestWrap<OrderIndexRequest> wrap = SgsRequestWrap.wrap(orderIndexRequest);\n        System.out.println("revokeOrder request=>" + JSON.toJSONString(wrap));\n\n        SgsResponseWrap<GetPlaceOrderResponse> responseWrap = client.execute(SgsApi.REVOKE_ACQUIRE_ORDER, wrap);\n        System.out.println("revokeOrder response=>" + JSON.toJSONString(responseWrap));\n        Assert.assertTrue(SgsApi.checkResponse(responseWrap));\n        GetPlaceOrderResponse body = responseWrap.getBody();\n        System.out.println("revokeOrder body=>" + JSON.toJSONString(body));\n')),(0,a.kt)("br",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"12. Protocol apply")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},' PayByClient client = getPayByClient();\n\n        ApplyProtocolRequest applyProtocolRequest = new ApplyProtocolRequest();\n        // Merchant order number Required\n        applyProtocolRequest.setMerchantOrderNo("M320000000002");\n        // langType Optional\n        applyProtocolRequest.setLangType(ProtocolLangType.EN);\n        // expiredTime Optional\n        applyProtocolRequest        .setExpiredTime(Date.from(LocalDateTime.now().plusHours(1).atZone(ZoneId.systemDefault()).toInstant()));\n\n        String payByPubKey = new String(Files\n            .readAllBytes(Paths.get(PayByDemo.class.getClassLoader().getResource("payby_public_key.pem").toURI())));\n        // signerMerchantId Required\n        applyProtocolRequest\n            .setSignerMerchantId(RsaUtil.encrypt("200000001222", Charset.forName("UTF-8"), payByPubKey, 2048));\n        // protocolSceneCode Required\n        applyProtocolRequest.setProtocolSceneCode("110");\n        // Notification URL Optional\n        applyProtocolRequest.setNotifyUrl("http://yoursite.com/api/notification");\n        // protocolSceneParams Required\n        Map<String, String> protocolSceneParams = new HashMap<String, String>();\n        protocolSceneParams.put("iapDeviceId", "");\n        protocolSceneParams.put("appId", "");\n        applyProtocolRequest.setProtocolSceneParams(protocolSceneParams);\n\n        SgsRequestWrap<ApplyProtocolRequest> wrap = SgsRequestWrap.wrap(applyProtocolRequest);\n        System.out.println("applyProtocol request=>" + JSON.toJSONString(wrap));\n        SgsResponseWrap<ApplyProtocolResponse> responseWrap = client.execute(SgsApi.APPLY_PROTOCOL, wrap);\n        System.out.println("applyProtocol response=>" + JSON.toJSONString(responseWrap));\n        Assert.assertTrue(SgsApi.checkResponse(responseWrap));\n        ApplyProtocolResponse body = responseWrap.getBody();\n        System.out.println("applyProtocol body=>" + JSON.toJSONString(body));\n')),(0,a.kt)("br",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"13. Protocol query")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},' PayByClient client = getPayByClient();\n\n\n        GetProtocolRequest getProtocolRequest = new GetProtocolRequest();\n        // Merchant order number Required\n        getProtocolRequest.setMerchantOrderNo("M320000000002");\n\n        SgsRequestWrap<GetProtocolRequest> wrap = SgsRequestWrap.wrap(getProtocolRequest);\n        System.out.println("getProtocol request=>" + JSON.toJSONString(wrap));\n\n        SgsResponseWrap<GetProtocolResponse> responseWrap = client.execute(SgsApi.GET_PROTOCOL, wrap);\n        System.out.println("getProtocol response=>" + JSON.toJSONString(responseWrap));\n        Assert.assertTrue(SgsApi.checkResponse(responseWrap));\n        GetProtocolResponse body = responseWrap.getBody();\n        System.out.println("getProtocol body=>" + JSON.toJSONString(body));\n')),(0,a.kt)("br",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"14. Result notification")),(0,a.kt)("p",null,"Verify signature"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'    // setting payby publicKey path\n    String payByPubKey = new String(Files.readAllBytes(Paths.get(PayByDemo.class.getClassLoader().getResource("payby_public_key.pem").toURI())));\n    String plain =\n        "{\\"notify_time\\":\\"20200428133706\\",\\"acquireOrder\\":{\\"product\\":\\"Basic Payment Gateway\\",\\"orderNo\\":\\"911588066370006619\\",\\"paySceneCode\\":\\"DYNQR\\",\\"subject\\":\\"123456\\",\\"accessoryContent\\":{\\"amountDetail\\":{\\"vatAmount\\":{\\"amount\\":0.10,\\"currency\\":\\"AED\\"}},\\"terminalDetail\\":{\\"merchantName\\":\\"binge test merchant\\"},\\"goodsDetail\\":{\\"goodsId\\":\\"GI1005\\",\\"body\\":\\"Gifts\\",\\"goodsName\\":\\"candy flower\\"}},\\"merchantOrderNo\\":\\"eaa16681-070b-4ae6-9b13-809b0db6eb89\\",\\"expiredTime\\":1588073568745,\\"requestTime\\":1588066368745,\\"totalAmount\\":{\\"amount\\":0.10,\\"currency\\":\\"AED\\"},\\"payeeMid\\":\\"200000042607\\",\\"notifyUrl\\":\\"http://yoursite.com/api/notification\\",\\"paymentInfo\\":{\\"payChannel\\":\\"BALANCE\\",\\"paidTime\\":1588066471000,\\"payeeFeeAmount\\":{\\"amount\\":0.01,\\"currency\\":\\"AED\\"},\\"payerFeeAmount\\":{\\"amount\\":0.00,\\"currency\\":\\"AED\\"},\\"paidAmount\\":{\\"amount\\":0.10,\\"currency\\":\\"AED\\"},\\"payerMid\\":\\"100000001104\\"},\\"status\\":\\"PAID_SUCCESS\\"},\\"_input_charset\\":\\"UTF-8\\",\\"notify_timestamp\\":1588066626060,\\"notify_id\\":\\"202004280007581901\\"}";\n    String sign =\n        "dPVyhhidZioH00QCVglgDfXNcDXHuMXmtzYF4WCEvnvmL3nCyqP5r9DmQ2bQYOf30tLEpqx1vmJpcT85f8voual7+sKPAehGRbyL9m30BF1KHwOFOhZSnOsBO8NQDJ1WMkG34mRmndfKRWpzi6RzWwfS/twJRXTt7maY2yPt93xhqeb2JbG2hktDFx8tnk3oxXil3oZLFq75X2Gbpd1SkrsnvxTLq5Bo98i4K3Kl4jWySU/vu8nX0M2JPWF6uC3OlOMq32Wo3mDPqM0DzH9t9WBwz2X6MQVnc/aFA5GfJbMKMYFFYwCh9CPtaWbrGmAFXAC9u/sz8bt3IAyiAGdd4w==";\n\n    // assert verify sign\n    Assert.assertTrue(RsaUtil.verifySign(plain, Charset.forName("UTF-8"), sign, payByPubKey));\n\n    GetPlaceOrderResponse callbackOrder = JSON.parseObject(plain, new TypeReference<GetPlaceOrderResponse>() {});\n\n    System.out.println("acquireOrder callback body=>" + callbackOrder);\n\n')),(0,a.kt)("p",null,"Servlet receives messages"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},' @Override\n protected void  doPost(HttpServletRequest req, HttpServletResponse httpResponse) throws ServletException, IOException {\n\n    String sign = req.getHeader("sign");\n\n    String body = IOUtils.toString(req.getInputStream(), "UTF-8");\n\n    // setting payby publicKey path\n    String payByPubKey = new String(Files.readAllBytes(Paths.get(PayByDemo.class.getClassLoader().getResource("payby_public_key.pem").toURI())));\n\n    // assert verify sign\n    Assert.assertTrue(RsaUtil.verifySign(plain, Charset.forName("UTF-8"), sign, payByPubKey));\n\n    //TODO Business logic\n    GetPlaceOrderResponse callbackOrder = JSON.parseObject(plain, new TypeReference<GetPlaceOrderResponse>() {});\n\n    System.out.println("acquireOrder callback body=>" + callbackOrder);\n\n    httpResponse.setContentType("application/json;charset=UTF-8");\n\n    httpResponse.getOutputStream().write("SUCCESS".getBytes("UTF-8"));\n\n    httpResponse.flushBuffer();\n\n  }\n')),(0,a.kt)("br",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"15. Download Statement"),"\nOrder Statement"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'    GetStatementRequest req = new GetStatementRequest();\n    // setting statementDate\n    req.setStatementDate("20200605");\n    PayByClient client = getPayByClient();\n    SgsRequestWrap<GetStatementRequest> wrap = SgsRequestWrap.wrap(req);\n    String statementFilePath = "d:\\\\payby_statement_file";\n    File statementFileDir = new File(statementFilePath);\n    System.out.println("getOrderStatement request=>" + JSON.toJSONString(wrap));\n    SgsResponseWrap<File> responseWrap = client.download(SgsApi.GET_ORDER_STATEMENT, wrap, statementFileDir);\n    System.out.println("getOrderStatement response=>" + responseWrap);\n    Assert.assertTrue(SgsApi.checkResponse(responseWrap));\n    System.out.println("getOrderStatement file path=>" + responseWrap.getBody().getAbsolutePath());\n    System.out.println("getOrderStatement file size=>" + responseWrap.getBody().length());\n')),(0,a.kt)("p",null,"Fund Statement"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'    GetStatementRequest req = new GetStatementRequest();\n    // setting statementDate\n    req.setStatementDate("20200605");\n    PayByClient client = getPayByClient();\n    SgsRequestWrap<GetStatementRequest> wrap = SgsRequestWrap.wrap(req);\n    String statementFilePath = "d:\\\\payby_statement_file";\n    File statementFileDir = new File(statementFilePath);\n    System.out.println("getFundStatement request=>" + JSON.toJSONString(wrap));\n    SgsResponseWrap<File> responseWrap = client.download(SgsApi.GET_FUND_STATEMENT, wrap, statementFileDir);\n    System.out.println("getFundStatement response=>" + responseWrap);\n    Assert.assertTrue(SgsApi.checkResponse(responseWrap));\n    System.out.println("getFundStatement file path=>" + responseWrap.getBody().getAbsolutePath());\n    System.out.println("getFundStatement file size=>" + responseWrap.getBody().length());\n')),(0,a.kt)("br",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"16. InApp Signature")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'    InappSignContent content = new InappSignContent();\n    // iapAppId Required\n    content.setIapAppId("00001");\n    // iapDeviceId Required\n    content.setIapDeviceId("001");\n    // partnerId Required\n    content.setIapPartnerId("20000000076");\n    // token Required\n    content.setToken("daerccxxcdsda0eeda");\n    String merchantPrivateKey = new String(Files.readAllBytes(\n        Paths.get(PayByDemo.class.getClassLoader().getResource("merchant_demo_private.pem").toURI())));\n    System.out.println("plain==>" + SignSerializationUtil.serialize(content));\n    System.out.println("sign==>" + RsaUtil.sign(content, Charset.forName("UTF-8"), merchantPrivateKey));\n')))}c.isMDXComponent=!0},8209:(e,n,t)=>{t(67294)}}]);