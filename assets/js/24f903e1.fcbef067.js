"use strict";(self.webpackChunkdeveloper_official_site=self.webpackChunkdeveloper_official_site||[]).push([[6288],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},y=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),y=s(n),u=i,m=y["".concat(p,".").concat(u)]||y[u]||d[u]||r;return n?a.createElement(m,o(o({ref:t},c),{},{components:n})):a.createElement(m,o({ref:t},c))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=y;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}y.displayName="MDXCreateElement"},47607:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=n(83117),i=(n(67294),n(3905));n(8209);const r={sidebar_position:4,toc_max_heading_level:6},o="In-App SDK - iOS",l={unversionedId:"Online Payment Integration /Checkout/inapp-sdk-ios",id:"Online Payment Integration /Checkout/inapp-sdk-ios",title:"In-App SDK - iOS",description:"Payers will have the almost the same operation process for using In-APP and Paypage. The difference is that if the mobile client integrates the sdk, users will get a smoother experience when paying on the native page than a web page.",source:"@site/docs/Online Payment Integration /Checkout/inapp-sdk-ios.md",sourceDirName:"Online Payment Integration /Checkout",slug:"/Online Payment Integration /Checkout/inapp-sdk-ios",permalink:"/payby-developer-doc/docs/Online Payment Integration /Checkout/inapp-sdk-ios",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,toc_max_heading_level:6},sidebar:"tutorialSidebar",previous:{title:"In-App SDK - Android",permalink:"/payby-developer-doc/docs/Online Payment Integration /Checkout/inapp-sdk-android"},next:{title:"Special Payment Scenes"}},p={},s=[{value:"User experience",id:"user-experience",level:3},{value:"System interaction diagram",id:"system-interaction-diagram",level:3},{value:"SDK",id:"sdk",level:3},{value:"Term Definition",id:"term-definition",level:3},{value:"Applicable version",id:"applicable-version",level:3},{value:"Installation",id:"installation",level:3},{value:"Installation with CocoaPods",id:"installation-with-cocoapods",level:4},{value:"Usage",id:"usage",level:3},{value:"Initialize SDK (Required)",id:"initialize-sdk-required",level:4},{value:"Payment Result Code Description",id:"payment-result-code-description",level:4}],c={toc:s};function d(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"in-app-sdk---ios"},"In-App SDK - iOS"),(0,i.kt)("p",null,"Payers will have the almost the same operation process for using ",(0,i.kt)("strong",{parentName:"p"},"In-APP")," and ",(0,i.kt)("strong",{parentName:"p"},"Paypage"),". The difference is that if the mobile client integrates the sdk, users will get a smoother experience when paying on the native page than a web page."),(0,i.kt)("br",null),(0,i.kt)("h3",{id:"user-experience"},"User experience"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"When customers are ready to complete their payment, your mobile application creates a new order creation request."),(0,i.kt)("li",{parentName:"ol"},"The PayBy returns a URL that that redirects customers to a checkout."),(0,i.kt)("li",{parentName:"ol"},"Customers enter their payment details on the checkout and complete the transaction."),(0,i.kt)("li",{parentName:"ol"},"If the payment is completed, customers will be redirected to the merchant's success page.",(0,i.kt)("br",null))),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"card-ue",src:n(16577).Z,width:"1481",height:"1000"})),(0,i.kt)("h3",{id:"system-interaction-diagram"},"System interaction diagram"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"inappflow",src:n(38907).Z,width:"1125",height:"1957"})),(0,i.kt)("br",null),(0,i.kt)("h3",{id:"sdk"},"SDK"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/PayBy/PayBy-inApp-iOS"},"Link")),(0,i.kt)("br",null),(0,i.kt)("h3",{id:"term-definition"},"Term Definition"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"deviceId: Every device has its own unique deviceId. UAT environment ","[joint debugging]"," fixed: deviceId123"),(0,i.kt)("li",{parentName:"ul"},"partnerId: Every merchant is assigned a partnerId while applying for the payment service"),(0,i.kt)("li",{parentName:"ul"},"appId: Every app of a merchant is assigned an appId while applying for the payment service"),(0,i.kt)("li",{parentName:"ul"},"token: It contains order information"),(0,i.kt)("li",{parentName:"ul"},'sign: First, generate a singString by arranging deviceId\u3001partnerId\u3001appId\u3001token order. The rules are as follows: String signString = "iapAppId="+appId+"&iapDeviceId=" +deviceId+"&iapPartnerId="+partnerId+"&token="+token; Second, sign the signString with privateKey, and the encryption rules can be seen in the demo. Note: For demo purposes, the sign is generated on the app client. For security, the sign should be generated by the server and then returned to the client.')),(0,i.kt)("br",null),(0,i.kt)("h3",{id:"applicable-version"},"Applicable version"),(0,i.kt)("p",null,"Use Xcode 10 and above to use the new version of SLDPayByPayment SDK, iOS 10.0 and above"),(0,i.kt)("br",null),(0,i.kt)("h3",{id:"installation"},"Installation"),(0,i.kt)("h4",{id:"installation-with-cocoapods"},"Installation with CocoaPods"),(0,i.kt)("p",null,"[1]"," Build your project in XCode."),(0,i.kt)("br",null),(0,i.kt)("p",null,"[2]"," To integrate SLDPayByPayment into your Xcode project using CocoaPods, specify it in your Podfile\uff1a",(0,i.kt)("br",null)),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"pod 'PXRPPayByPayment'\n")),(0,i.kt)("p",null,"Save and execute ",(0,i.kt)("inlineCode",{parentName:"p"},"pod install"),", then open the project with a file with the suffix .xcworkspace. Note: If you are using ",(0,i.kt)("inlineCode",{parentName:"p"},"SLDPayByPayment")," now, please replace it with ",(0,i.kt)("inlineCode",{parentName:"p"},"PXRPPayByPayment"),", run ",(0,i.kt)("inlineCode",{parentName:"p"},"pod install")," to install, and then the new ",(0,i.kt)("inlineCode",{parentName:"p"},"SLDPayByPayment.framework")," will be integrated into you project. ",(0,i.kt)("inlineCode",{parentName:"p"},"SLDPayByPayment")," pod doesn't been maintained any more."),(0,i.kt)("br",null),(0,i.kt)("p",null,"[3]",' In Xcode, select your project settings, select the "TARGETS" column, and add "URL scheme" to the "URL Types" in the "Info" tab bar for your registered application "payby" + iapAppId (As shown). ',(0,i.kt)("a",{parentName:"p",href:"https://github.com/PayBy/PayBy-inApp-iOS/blob/master/1661319255013.jpg"},(0,i.kt)("img",{parentName:"a",src:"https://github.com/PayBy/PayBy-inApp-iOS/raw/master/1661319255013.jpg",alt:"Image text"}))),(0,i.kt)("br",null),(0,i.kt)("p",null,"[4]",' In Xcode, select your project settings, select the "TARGETS" column, and change "Architectures" to "arm64" in the "Build Settings" tab (As shown). ',(0,i.kt)("a",{parentName:"p",href:"https://github.com/PayBy/PayBy-inApp-iOS/blob/master/1661244568047.jpg"},(0,i.kt)("img",{parentName:"a",src:"https://github.com/PayBy/PayBy-inApp-iOS/raw/master/1661244568047.jpg",alt:"Image text"}))),(0,i.kt)("br",null),(0,i.kt)("p",null,"[5]",' In Xcode, select your project settings, select the "TARGETS" column, and change "Enable Bitcode" to "No" in the "Build Settings" tab (As shown). ',(0,i.kt)("a",{parentName:"p",href:"https://github.com/PayBy/PayBy-inApp-iOS/blob/master/1661244707155.jpg"},(0,i.kt)("img",{parentName:"a",src:"https://github.com/PayBy/PayBy-inApp-iOS/raw/master/1661244707155.jpg",alt:"Image text"}))),(0,i.kt)("br",null),(0,i.kt)("h3",{id:"usage"},"Usage"),(0,i.kt)("h4",{id:"initialize-sdk-required"},"Initialize SDK (Required)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#import "AppDelegate.h"\n#import <SLDPayByPayment/SLDPayByPayment.h>\n\n@implementation AppDelegate\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    // Override point for customization after application launch.\n    [SLDPayByPaymentInterface setLogEnabled:YES];\n    \n//    [SLDPayByPaymentInterface setLanguage:SLDPayByPaymentLanguageEn];\n//    [SLDPayByPaymentInterface setUserInterfaceStyle:SLDPayByPaymentUserInterfaceStyleDark];\n//    SLDPayByPaymentConfig *config = [SLDPayByPaymentConfig defaultConfig];\n//    config.paymentMethodMenuColor = [SLDPayByPaymentColor colorWithLightColor:[UIColor redColor] darkColor:[UIColor greenColor]];\n//    config.paymentMethodTextColor = [SLDPayByPaymentColor colorWithLightColor:[UIColor whiteColor] darkColor:[UIColor blackColor]];\n//    config.primaryColor = [SLDPayByPaymentColor colorWithLightColor:[UIColor blueColor] darkColor:[UIColor blueColor]];\n//    config.appPayUseQrCode = NO;\n//    config.useDefaultResultPage = YES;\n//    [SLDPayByPaymentInterface updateConfig:config];\n\n    [SLDPayByPaymentInterface initWithAppId:{appId} partnerId:{partnerId} environment:SLDPayByPaymentEnvironmentDevelop];\n\n    ...\n\n    return YES;\n}\n\n@end\n')),(0,i.kt)("br",null),(0,i.kt)("p",null,"SLDPayByPaymentEnvironment Description:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"SLDPayByPaymentEnvironmentDevelop: The environment for developing and testing."),(0,i.kt)("li",{parentName:"ul"},"SLDPayByPaymentEnvironmentUAT: The environment for customer debuging."),(0,i.kt)("li",{parentName:"ul"},"SLDPayByPaymentEnvironmentRelease: The environment for product online.")),(0,i.kt)("br",null),(0,i.kt)("p",null,"Call methods in your class (Objective-C)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'NSString *sign = [NSString stringWithFormat:@"iapAppId=%@&iapDeviceId=%@&iapPartnerId=%@&token=%@", self.appIdTextField.text, self.deviceIdTextField.text, self.partnerIdTextField.text, self.tokenTextField.text];\n[SLDPayByPaymentInterface paymentInViewController:self withToken:self.tokenTextField.text sign:[GPBRSA encryptString:sign privateKey:[GlobalDefines privateKey]] deviceId:self.deviceIdTextField.text resultCallback:^(NSString * _Nonnull result) {\n    NSLog(@"resultCallback: %@", result);\n    if ([SLDPayByPaymentConfig defaultConfig].useDefaultResultPage == NO) {\n        [self showAlertWithMessage:result];\n    }\n}];\n')),(0,i.kt)("br",null),(0,i.kt)("p",null,"Call methods in your class (Swift)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'let token = self.tokenTextField.text ?? ""\nlet deviceId = self.deviceIdTextField.text ?? ""\nlet sign = "iapAppId=\\(self.appIdTextField.text ?? "")&iapDeviceId=\\(deviceId)&iapPartnerId=\\(self.partnerIdTextField.text ?? "")&token=\\(token)"\nSLDPayByPaymentInterface.payment(in: self, withToken: token, sign: GPBRSA.encryptString(sign, privateKey: GlobalDefines.privateKey()), deviceId: deviceId) { [weak self] result in\n    print("resultCallback: \\(result)")\n    if SLDPayByPaymentConfig.default().useDefaultResultPage == false {\n        self?.showAlert(with: result)\n    }\n}\n')),(0,i.kt)("br",null),(0,i.kt)("h4",{id:"payment-result-code-description"},"Payment Result Code Description"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"SUCCESS: The payee has received the payment successfully, and the entire payment process for the order is completed."),(0,i.kt)("li",{parentName:"ul"},"FAIL: Payment failed."),(0,i.kt)("li",{parentName:"ul"},"PAYING: Processing. Wait for the payment process to complete and return the final payment result.")))}d.isMDXComponent=!0},16577:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/card-ue-hosted-e629ee3be589dba0396d16510aaa1850.png"},38907:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/inapp-633444862ed69152de709c4dc1118774.png"},8209:(e,t,n)=>{n(67294)}}]);